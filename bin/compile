#!/bin/bash

set -e
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

mkdir -p $BUILD_DIR/.profile.d

########################
# INSTALL OSSLSIGNCODE #
########################

if [ ! -f $CACHE_DIR/osslsigncode-1.7.1/osslsigncode ]; then
  tar -C $CACHE_DIR -xzf $BUILD_DIR/resources/exe/osslsigncode-1.7.1.tar.gz
  cd $CACHE_DIR/osslsigncode-1.7.1
  ./configure
  make
fi
mkdir -p $BUILD_DIR/.heroku/osslsigncode/bin
cp $CACHE_DIR/osslsigncode-1.7.1/osslsigncode $BUILD_DIR/.heroku/osslsigncode/bin/osslsigncode
echo 'export PATH=$PATH:$HOME/.heroku/osslsigncode/bin' > $BUILD_DIR/.profile.d/osslsigncode.sh

####################
# INSTALL APTUTILS #
####################

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"
APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"
apt-get $APT_OPTIONS update
apt-get $APT_OPTIONS -y --force-yes -d install --reinstall apt-utils

##############
# INSTALL GO #
##############

VERSION=1.6
OS=linux
ARCH=amd64

if [ ! -d $CACHE_DIR/go$VERSION ]; then
  echo "-----> Installing go$VERSION"
  wget -nv https://storage.googleapis.com/golang/go$VERSION.$OS-$ARCH.tar.gz
  mkdir -p $CACHE_DIR/go$VERSION
  tar -C $CACHE_DIR/go$VERSION -xzf go$VERSION.$OS-$ARCH.tar.gz
else
  echo "-----> go$VERSION is already installed (cached)"
fi

cp -r $CACHE_DIR/go$VERSION/go $BUILD_DIR/.heroku/go
cat << EOF > $BUILD_DIR/.profile.d/go.sh
export GOPATH=\$HOME
export GOROOT=\$HOME/.heroku/go
export PATH=\$PATH:\$GOROOT/bin
EOF
